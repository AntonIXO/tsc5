#include "imports/stdlib.fc";

(int, int, int, slice) load_storage() inline_ref {
  var cs = get_data().begin_parse();
  (int public_key, int execution_time, int seqno, slice receiver) = (cs~load_uint(256), cs~load_uint(32), cs~load_uint(32), cs~load_msg_addr());
  cs.end_parse();
  return (public_key, execution_time, seqno, receiver);
}

() store_data(execution_time, seqno) impure inline_ref {
  set_data(begin_cell()
          .store_uint(execution_time, 32)
          .store_uint(seqno, 32)
          .end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; do nothing
}

() recv_external(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    accept_message();
    int op = in_msg_body~load_uint(32);



    if (op == 0x9df10277) {
        (int public_key, int execution_time, int seqno, slice receiver) = load_storage();

        (cell information, int query_id, slice signature) = (in_msg_body~load_ref(), in_msg_body~load_uint(64), in_msg_body~load_bits(512));

        var second = begin_parse(information);
        (int locked_for, int new_seqno) = (second~load_uint(32), second~load_uint(32));
        throw_if(119, new_seqno != seqno + 1);
        throw_if(120, check_data_signature(in_msg_body, signature, public_key));
        throw_if(121, locked_for <= 0);
        throw_if(122, execution_time < now());
        throw_if(123, now() + locked_for < execution_time);

        execution_time = now() + execution_time + locked_for;
        store_data(execution_time, seqno + 1);
    }

    if (op == 0xbb4be234) {
        (int public_key, int execution_time, int seqno, slice receiver) = load_storage();

        (cell information, int query_id, slice signature) = (in_msg_body~load_ref(), in_msg_body~load_uint(64), in_msg_body~load_bits(512));

        var second = begin_parse(information);
        (int locked_for, int new_seqno) = (second~load_uint(32), second~load_uint(32));
        throw_if(124, execution_time >= now());

        var message = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(receiver)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell();
        send_raw_message(message, 128);
    }
}


int seqno() method_id {
    return get_data().begin_parse().skip_bits(256 + 32).preload_uint(32);
}

int get_execution_time() method_id {
    return get_data().begin_parse().skip_bits(256).preload_uint(32);
}